//EX2 computeSeries
#include <stdio.h>
int main()
{
   int n, denominator = 1;
   float x, result = 1.0, numerator = 1.0;

   printf("Enter x: \n");
   scanf("%f", &x);

   /* Write your program code here */
   for(n=1;n<10;n++){
       numerator = pow(x,n);
       denominator *= n;
       result += (numerator/denominator);
   }

   printf("Result = %.2f\n",  result);
   return 0;
}


//EX2 printPattern(same as lab1)
#include <stdio.h>
int main()
{
   int row, col, height;
   int num = 0;
   printf("Enter the height: \n");
   scanf("%d", &height);
   printf("Pattern: \n");

   /* Write your program code here */
   int i,j,k;
   //printf("ans is %d",1%2);
   for(i=1;i<height+1;i++){
       switch(i%3){
            case 0 :for(j=0;j<i;j++){printf("3");}
                    printf("\n");break;
            default:k=i%3;//printf("k is %d\n",k);
                    switch(k){
                        case(1):for(j=0;j<i;j++){
                        printf("1");}printf("\n");break;
                        case(2):for(j=0;j<i;j++){printf("2");}
                        printf("\n");break;
                    }
   
   }}
   return 0;
}

//EX6 computeCircle
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define INIT_VALUE -1
struct circle {
   double radius;
   double x;
   double y;
};
int intersect(struct circle, struct circle);
int contain(struct circle *, struct circle *);
int main()
{
   struct circle c1, c2;  
   int choice, result = INIT_VALUE;  
   
   printf("Select one of the following options: \n");
   printf("1: intersect()\n");     
   printf("2: contain()\n");
   printf("3: exit()\n"); 
   do {
      result=-1;
      printf("Enter your choice: \n");
      scanf("%d", &choice);
      switch (choice) {
         case 1:  
            printf("Enter circle 1 (radius x y): \n");
            scanf("%lf %lf %lf", &c1.radius, &c1.x, &c1.y);
            printf("Enter circle 2 (radius x y): \n");
            scanf("%lf %lf %lf", &c2.radius, &c2.x, &c2.y); 
            result = intersect(c1, c2);   
            if (result == 1)
               printf("intersect(): intersect\n"); 
            else if (result == 0) 
               printf("intersect(): not intersect\n");   
            else
               printf("intersect(): error\n");        
            break;
         case 2:   
            printf("Enter circle 1 (radius x y): \n");
            scanf("%lf %lf %lf", &c1.radius, &c1.x, &c1.y);
            printf("Enter circle 2 (radius x y): \n");
            scanf("%lf %lf %lf", &c2.radius, &c2.x, &c2.y);  
            result = contain(&c1, &c2);  
            if (result == 1)
               printf("contain(): contain\n"); 
            else if (result == 0) 
               printf("contain(): not contain\n");   
            else
               printf("contain(): error\n");              
            break;
      }
   } while (choice < 3);      
   return 0;
}
int intersect(struct circle c1, struct circle c2)
{
	/* Write your program code here */
	double rad_dist =0, cent_dist =0;
	cent_dist = sqrt(pow(c2.x-c1.x,2)+pow(c2.y-c1.y,2));
	//printf("cd = %lf\n", cent_dist);
	rad_dist = c2.radius + c1.radius;
	///printf("rd = %lf\n",rad_dist);
	if(cent_dist<=rad_dist){return 1;}
	return 0;
}
int contain(struct circle *c1, struct circle *c2)
{
	/* Write your program code here */
	double cent_dist = sqrt(pow(c2->x-c1->x,2)+pow(c2->y-c1->y,2));
	//printf("%lf",cent_dist);
	if(c1->radius >=(c2->radius + cent_dist)){return 1;}
	return 0;
}


//Ex6 computeExp
#include <stdio.h>
typedef struct {
   float operand1, operand2;
   char op;  
} bexpression;
float compute1(bexpression expr);
float compute2(bexpression *expr);
int main()
{
   bexpression e;
   int choice;
   
   printf("Select one of the following options: \n");
   printf("1: compute1()\n");     
   printf("2: compute2()\n");
   printf("3: exit()\n"); 
   do {
      printf("Enter your choice: \n");
      scanf("%d", &choice);
      switch (choice) {
         case 1:  
            printf("Enter expression (op1 op2 op): \n");
            scanf("%f %f %c", &e.operand1, &e.operand2, &e.op);
            printf("compute1(): %.2f\n", compute1(e));
            break;
         case 2:   
            printf("Enter expression (op1 op2 op): \n");
            scanf("%f %f %c", &e.operand1, &e.operand2, &e.op);
            printf("compute2(): %.2f\n", compute2(&e));
            break;
      }
   } while (choice < 3);    
   return 0;
}
float compute1(bexpression expr)
{
   /* Write your program code here */
   float result;
   switch(expr.op){
       case '+' : result = expr.operand1 + expr.operand2;break;
       case '-' : result = expr.operand1 - expr.operand2;break;
       case '*' : result = expr.operand1 * expr.operand2;break;
       case '/' : result = expr.operand1 / expr.operand2;break;
   }return result;
}
float compute2(bexpression *expr)
{
   /* Write your program code here */
   float result;
   switch(expr->op){
       case '+' : result = expr->operand1 + expr->operand2;break;
       case '-' : result = expr->operand1 - expr->operand2;break;
       case '*' : result = expr->operand1 * expr->operand2;break;
       case '/' : result = expr->operand1 / expr->operand2;break;
   }return result;
}
