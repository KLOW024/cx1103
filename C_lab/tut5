#include <stdio.h>
#include <math.h>

struct circle {
    double radius;
    double x;
    double y;
};

int intersect(struct circle c1, struct circle c2);
int contain(struct circle *c1, struct circle *c2);

int main() {
    struct circle c1 = {5, 3,4}, *a = &c1;
    struct circle c2 = {10, 5, 3},*b = &c2; 
    printf("%d", contain(b,a));
      
}

int intersect(struct circle c1, struct circle c2){
    double dist;
    dist = sqrt(pow(c2.y-c1.y, 2)+pow(c2.x-c1.x, 2));
    if(dist <= (c1.radius+c2.radius)){
        return 1;
    }
    else return 0;
}//doesnt check if it contains 

int contain(struct circle *c1, struct circle *c2){
    double distx, disty, dist;
    distx = (c1->x) - (c2->x);
    disty = (c1->y) - (c2->y);
    dist = sqrt(pow(distx,2) + pow(disty,2));
    if(c1->radius >= (c2->radius + dist)){
        return 1;
    } else return 0;

}

//qn2
#include <stdio.h>
#include <math.h>

typedef struct {
float operand1, operand2;
char op;    /* operator ‘+’,‘‐’,‘*’ or ‘/’  */
} bexpression;

float compute1(bexpression expr);
float compute2(bexpression *expr);

int main() {
    bexpression C = {9, 3, '/'};
    printf("%.5f\n", compute1(C));
    struct bexpression *a = &C;
    printf("%.5f", compute2(a)); 
}

float compute1(bexpression expr){
    switch(expr.op){
        case '+': return expr.operand1 + expr.operand2; 
        case '-': return expr.operand1 - expr.operand2;
        case '*': return expr.operand1 * expr.operand2;
        case '/': return expr.operand1 / expr.operand2;
    }
}

float compute2(bexpression *expr){
    switch(expr -> op){
        case '+': return expr -> operand1 + expr -> operand2; 
        case '-': return expr -> operand1 - expr -> operand2;
        case '*': return expr -> operand1 * expr -> operand2;
        case '/': return expr -> operand1 / expr -> operand2;
    }
}

//qn3
#include <stdio.h>

typedef struct {
   int id;           /* staff identifier */
   int totalLeave;   /* the total number of days of leave allowed */
   int leaveTaken;
} leaveRecord;

void getInput(leaveRecord list[ ], int *n);
int mayTakeLeave(leaveRecord list[ ], int id, int leave, int n); 
void printList(leaveRecord list[ ], int n); 

int main() {
    int n =3;
    int *p = &n;
    leaveRecord k[10];
    printf("%d, %d, %d\n", k[0].id, k[0].totalLeave, k[0].leaveTaken);
    getInput(k, p);
    printf("print1 %d, %d, %d\n",k[0].id, k[0].totalLeave, k[0].leaveTaken);
    printf("print2 %d, %d, %d\n",k[1].id, k[1].totalLeave, k[1].leaveTaken);
    printf("y/n is %d\n",mayTakeLeave(k, 20, 3, *p));
    printList(k, *p);
}

void getInput(leaveRecord list[ ], int *n){
    *n =0;
    
    while(1){
        printf("input 3 integers representing identifier, leaves allowed and taken\n");
        scanf("%d", &list[*n].id);
        if(list[*n].id == -1)break;
        scanf("%d %d", &list[*n].totalLeave, &list[*n].leaveTaken);
        printf("print%d %d, %d, %d\n",*n, list[*n].id, list[*n].totalLeave, list[*n].leaveTaken);
        (*n)++;

    }
}

int mayTakeLeave(leaveRecord list[ ], int id, int leave, int n){
    int i;
    for(i=0;i<n;i++){
        if(list[i].id == id)break;
        else if(i==n-1)return-1;
    }
    if( leave <= (list[i].totalLeave-list[i].leaveTaken))return 1;
    else return 0;

}

void printList(leaveRecord list[], int n){
    int i;
    for(i=0; i<n; i++){
        printf("%d staff is %d %d %d\n", i, list[i].id, list[i].totalLeave, list[i].leaveTaken);
    }
}
